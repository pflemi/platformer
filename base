def get_block(size):
    """Loads and returns a properly scaled block."""
    path = join("assets", "Terrain", "pinkblan.jpg")
    image = pygame.image.load(path).convert_alpha()
    surface = pygame.Surface((size, size), pygame.SRCALPHA)
    rect = pygame.Rect(0, 0, size, size)  # Fix positioning
    surface.blit(image, (0, 0), rect)
    return pygame.transform.scale(surface, (size, size))  # Keep original size


class Block(Object):
    """Represents a Mario-style terrain block."""
    def __init__(self, x, y, size):
        super().__init__(x, y, size, size)
        self.image = get_block(size)  
        self.mask = pygame.mask.from_surface(self.image)


def handle_vertical_collision(player, objects, dy):
    """Handles ceiling and landing collisions more accurately."""
    collided_objects = []
    for obj in objects:
        if pygame.sprite.collide_mask(player, obj):
            if dy > 0:  # Falling down (landing)
                if player.rect.bottom > obj.rect.top:  # Prevents auto-teleporting
                    player.rect.bottom = obj.rect.top
                    player.landed()
            elif dy < 0:  # Jumping (hitting head)
                player.rect.top = obj.rect.bottom
                player.hit_head()
        collided_objects.append(obj)
    return collided_objects


def main(window):
    clock = pygame.time.Clock()
    background, bg_image = get_background("coun.png")

    block_size = 50  # Reduced size to match Mario-style
    player = Player(100, 100, 32, 32)  # Adjusted to fit blocks better
    floor = [Block(i * block_size, HEIGHT - block_size, block_size) for i in range(-WIDTH // block_size, WIDTH * 2 // block_size)]
    
    # Added floating platforms
    floating_blocks = [
        Block(300, HEIGHT - 200, block_size),
        Block(350, HEIGHT - 200, block_size),
        Block(500, HEIGHT - 300, block_size)
    ]

    objects = floor + floating_blocks  # Combine floor and platforms
    
    offset_x = 0  

    run = True
    while run:
        clock.tick(FPS)

        for event in pygame.event.get():
            if event.type == pygame.QUIT:
                run = False
                break

            if event.type == pygame.KEYDOWN:
                if event.key == pygame.K_SPACE and player.jump_count < 2:
                    player.jump()

        player.loop(FPS)
        offset_x = handle_move(player, objects, offset_x)  
        draw(window, background, bg_image, player, objects, offset_x)

    pygame.quit()
    quit()
